//
//  OperationPresenter.swift
//  MoneyFlow
//
//  Created by –ù–∏–∫–∏—Ç–∞ –ì–æ–Ω—á–∞—Ä–æ–≤ on 04/09/2019.
//  Copyright ¬© 2019 –ù–∏–∫–∏—Ç–∞ –ì–æ–Ω—á–∞—Ä–æ–≤. All rights reserved.
//

import UIKit

class OperationPresenter {

    private let operation: Operation
    
    private let signForCurrency: [Currency: String] = [.rub: "‚ÇΩ", .eur: "‚Ç¨", .usd: "$"]
    private let emojiForCategory: [String: String] = ["–ü—Ä–æ–¥—É–∫—Ç—ã": "ü•¶", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": "üéÆ", "–ó–¥–æ—Ä–æ–≤—å–µ": "üíä", "–ü—Ä–æ–µ–∑–¥": "üöé", "–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç": "üì°"]
    private let defaultEmojiForCategory = "‚ùì"
    private let emojiForContact: [String: String] = ["–û–û–û –ú–æ—è–†–∞–±–æ—Ç–∞": "üè¢", "–í–∞—Å—è": "üë®‚Äçüç≥", "–ü–µ—Ç—è": "ü§µ", "–¢–∏–≥—Ä–∞–Ω": "üë≥üèª‚Äç‚ôÇÔ∏è"]
    private let defaultEmojiForContact = "‚ùì"

    lazy var idString: String = {
        return operation.id.description
    }()
    
    private(set) var dateString: String?
    
    lazy var valueString: String = {
        let formatter = NumberFormatter()
        formatter.usesGroupingSeparator = true
        formatter.numberStyle = .decimal
        let formattedNumberString = formatter.string(from: NSNumber(value: Int(operation.value)))
        
        if let numberString = formattedNumberString {
            return numberString + " " + signForCurrency[operation.currency]!
        } else {
            return "error"
        }
    }()
    
    lazy var contactString: String? = {
        if let op = operation as? DebtOperation { return op.contact }
        else { return nil }
    }()
    
    lazy var contactEmoji: String? = {
        if let op = operation as? DebtOperation { return emojiForContact[op.contact] ?? defaultEmojiForContact }
        else { return nil }
    }()
    
    lazy var categoryString: String? = {
        if let op = operation as? FlowOperation { return op.category }
        else { return nil }
    }()
    
    lazy var categoryEmoji: String? = {
        if let op = operation as? FlowOperation { return emojiForCategory[op.category] ?? defaultEmojiForCategory }
        else { return nil }
    }()
    
    lazy var accountString: String = {
        return operation.account
    }()
    
    lazy var commentString: String? = {
//        if let op = operation as? FlowOperation { return op.comment }
//        if let op = operation as? DebtOperation { return op.comment }
//        return nil
        return operation.date.formattedDescription
    }()
    
    init(_ operation: Operation) {
        self.operation = operation
    }
}
